############################################################################
#  Copyright 2011 robert tomb (bikeonastick)                               #
#                                                                          #
#  Licensed under the Apache License, Version 2.0 (the "License");         #
#  you may not use this file except in compliance with the License.        #
#  You may obtain a copy of the License at                                 #
#                                                                          #
#  http://www.apache.org/licenses/LICENSE-2.0                              #
#                                                                          #
#  Unless required by applicable law or agreed to in writing, software     #
#  distributed under the License is distributed on an "AS IS" BASIS,       #
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.#
#  See the License for the specific language governing permissions and     #
#  limitations under the License.                                          #
############################################################################

require 'captcha_maker'

module CaptchaImpls #:nodoc:

	# 
	# This class adds math problem generation on the top of 
	# CaptchaMaker. 
	#
  class MathCaptcha
		#
		# use this to get the math problem string
		#
		attr_reader :problem

		#
		# use this to get the solution to the math problem
		#
		attr_reader :solution

		# 
		# this is here mostly to facilitate testing, it's an easy accessor
		# for the symbol character used in the math problem
		#
		attr_reader :symbol
		def initialize()
			@symbols = ['*','+','-','/']
			# solve it
			# save off solution
			# create captcha of problem
		end

		#
		# Generates simple problems, no negatives from subtraction and no
		# remainders for division.
		#
		def generateRandomProblem
			@symbol = self.getRandomSymbol()
			@left_num = self.getRandomNumber()
			@right_num = self.getRandomNumber()
			
			# division is complex, don't want problems with remainders
			# and we don't want 0 division errors!!!
			if ( @symbol == '/' )
				if ( @right_num.to_i > @left_num.to_i )
					holder = @left_num
					@left_num = @right_num
					@right_num = holder
				end
				begin
					if ( @left_num.to_i % @right_num.to_i > 0 )
						@symbol = '+'
					end
				rescue ZeroDivisionError
					# we're fine if right_num is zero!
				end

			# this section is about not returning negative from subtraction
			elsif ( @symbol == '-' )
				if ( @right_num.to_i > @left_num.to_i )
					holder = @left_num
					@left_num = @right_num
					@right_num = holder
				end
			end

			@problem = "#{@left_num}#{@symbol}#{@right_num}"
		end

		#
		# gets a random number between 0-99
		#
		def getRandomNumber
			rand(99)
		end

		#
		# solves the math problem. will do nothing if you call it before
		# calling generateRandomProblem
		#
		def solveProblem
			if (@problem == nil)
				return
			end
			begin
				solve = eval(@problem)
			rescue ZeroDivisionError
				solve = 0
			end
			@solution = solve
		end

		#
		# gets a random symbol chosen from * + - /
		#
		def getRandomSymbol
			@symbols[rand(4)]
		end

		# 
		# Creates a captcha object based on the math problem 
		# generated by this object.
		#
		def createMathCaptcha
			if (@problem == nil)
				self.generateRandomProblem
			end
			@captcha = CaptchaMaker::CaptchaImage.new(@problem)
		end

		def stream_captcha
		end
		
  end

end
